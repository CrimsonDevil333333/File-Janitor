name: Build and Release Windows Executable

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v*' # This will match v1.0, v1.2.3, and v2025.08.24.142926
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Sets up Python on the runner
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Installs project dependencies and PyInstaller
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ttkbootstrap pyinstaller

      # 4. Build executable with PyInstaller
      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --name FileJanitor file_janitor.py
          # IMPORTANT: Replace 'file_janitor.py' with the actual name of your Python script.

      # 5. (Optional) Upload executable as a workflow artifact
      # This is useful for testing before creating the release
      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: FileJanitor-Windows-Executable
          path: dist/FileJanitor.exe

      # 6. Create a GitHub Release and upload the executable
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/FileJanitor.exe # Path to the executable to upload